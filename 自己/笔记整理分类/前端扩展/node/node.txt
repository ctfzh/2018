
var greet = require('./hello'); // 不要忘了写相对目录!
//如果只写模块名：
var greet = require('hello');
//则Node会依次在内置模块、全局模块和当前模块下查找hello.js，你很可能会得到一个错误：

Error: Cannot find module 'hello'
遇到这个错误，你要检查：
	模块名是否写对了；
	模块文件是否存在；
	相对路径是否写对了。


CommonJS规范
这种模块加载机制被称为CommonJS规范。在这个规范下，每个.js文件都是一个模块，它们内部各自使用的变量名和函数名都互不冲突，例如，hello.js和main.js都申明了全局变量var s = 'xxx'，但互不影响。

一个模块想要对外暴露变量（函数也是变量），可以用module.exports = variable;，一个模块要引用其他模块暴露的变量，用var ref = require('module_name');就拿到了引用模块的变量。
	
	
//要在模块中对外输出变量，用：
module.exports = variable;
//输出的变量可以是任意对象、函数、数组等等。

//要引入其他模块输出的对象，用：
var foo = require('other_module');
//引入的对象具体是什么，取决于引入模块输出的对象。



