
高阶函数
	JavaScript的函数其实都指向某个变量。既然变量可以指向函数，函数的参数能接收变量，那么一个函数就可以接收另一个函数作为参数，这种函数就称之为高阶函数。

	一个最简单的高阶函数：
	function add(x, y, f) {
		return f(x) + f(y);
	}

	高阶函数例子
	map    reduce    filter     sort
	


由于map()方法定义在JavaScript的Array中，我们调用Array的map()方法，传入我们自己的函数，就得到了一个新的Array作为结果：

'use strict';

function pow(x) {
    return x * x;
}
var arr = [1, 2, 3, 4, 5, 6, 7, 8, 9];
var results = arr.map(pow); // [1, 4, 9, 16, 25, 36, 49, 64, 81]
console.log(results);


map()作为高阶函数，事实上它把运算规则抽象了，因此，我们不但可以计算简单的f(x)=x2，还可以计算任意复杂的函数，比如，把Array的所有数字转为字符串：
	var arr = [1, 2, 3, 4, 5, 6, 7, 8, 9];
	arr.map(String); // ['1', '2', '3', '4', '5', '6', '7', '8', '9']


reduce的用法。Array的reduce()把一个函数作用在这个Array的[x1, x2, x3...]上，这个函数必须接收两个参数，reduce()把结果继续和序列的下一个元素做累积计算，其效果就是：
	[x1, x2, x3, x4].reduce(f) = f(f(f(x1, x2), x3), x4)

比方说对一个Array求和，就可以用reduce实现：

	var arr = [1, 3, 5, 7, 9];
	arr.reduce(function (x, y) {
		return x + y;
	}); // 25



filter也是一个常用的操作，它用于把Array的某些元素过滤掉，然后返回剩下的元素。
和map()类似，Array的filter()也接收一个函数。和map()不同的是，filter()把传入的函数依次作用于每个元素，然后根据返回值是true还是false决定保留还是丢弃该元素。

例如，在一个Array中，删掉偶数，只保留奇数，可以这么写：
	var arr = [1, 2, 4, 5, 6, 9, 10, 15];
	var r = arr.filter(function (x) {
		return x % 2 !== 0;
	});
	r; // [1, 5, 9, 15]


把一个Array中的空字符串删掉，可以这么写：
	var arr = ['A', '', 'B', null, undefined, 'C', '  '];
	var r = arr.filter(function (s) {
		return s && s.trim(); // 注意：IE9以下的版本没有trim()方法
	});
	r; // ['A', 'B', 'C']

	
filter()接收的回调函数，其实可以有多个参数。通常我们仅使用第一个参数，表示Array的某个元素。回调函数还可以接收另外两个参数，表示元素的位置和数组本身：
	var arr = ['A', 'B', 'C'];
	var r = arr.filter(function (element, index, self) {
		console.log(element); // 依次打印'A', 'B', 'C'
		console.log(index); // 依次打印0, 1, 2
		console.log(self); // self就是变量arr
		return true;
	});


利用filter，可以巧妙地去除Array的重复元素：
'use strict';
var
    r,
    arr = ['apple', 'strawberry', 'banana', 'pear', 'apple', 'orange', 'orange', 'strawberry'];
	
r = arr.filter(function (element, index, self) {
    return self.indexOf(element) === index;
});

console.log(r.toString());


indexOf() 函数返回元素在数组里的第一次出现的下标（第一次出现的位置）
toString()函数可以吧data数据转换为字符串输出
fruits.sort();
fruits.reverse();

sort() 方法用于对数组的元素进行排序。
排序顺序可以是字母或数字，并按升序或降序。
默认排序顺序为按字母升序。
注意：当数字是按字母顺序排列时"40"将排在"5"前面。
使用数字排序，你必须通过一个函数作为参数来调用。
函数指定数字是按照升序还是降序排列。
这些说起来可能很难理解，你可以通过本页底部实例进一步了解它。
注意： 这种方法会改变原始数组！。



		var points = [10, 100, 1, 5, 25, 40, 16];
		points.sort(function(a,b){
			return a-b;   //顺序排列
			return b-a;   //反序排列
		});
		var x = document.getElementById("box");
		x.innerHTML = points;


默认情况下，对字符串排序，是按照ASCII的大小比较的，现在，我们提出排序应该忽略大小写，按照字母序排序。要实现这个算法，不必对现有代码大加改动，只要我们能定义出忽略大小写的比较算法就可以：
		var arr = ['Google', 'apple', 'Microsoft'];
		arr.sort(function (s1, s2) {
			x1 = s1.toUpperCase();
			x2 = s2.toUpperCase();
			if (x1 < x2) {
				return -1;
			}
			if (x1 > x2) {
				return 1;
			}
			return 0;
		}); // ['apple', 'Google', 'Microsoft']
		
忽略大小写来比较两个字符串，实际上就是先把字符串都变成大写（或者都变成小写），再比较。
从上述例子可以看出，高阶函数的抽象能力是非常强大的，而且，核心代码可以保持得非常简洁。

最后友情提示，sort()方法会直接对Array进行修改，它返回的结果仍是当前Array：
		var a1 = ['B', 'A', 'C'];
		var a2 = a1.sort();
		a1; // ['A', 'B', 'C']
		a2; // ['A', 'B', 'C']
		a1 === a2; // true, a1和a2是同一对象



		
		//闭包
在函数lazy_sum中又定义了函数sum，并且，内部函数sum可以引用外部函数lazy_sum的参数和局部变量，当lazy_sum返回函数sum时，相关参数和变量都保存在返回的函数中，这种称为“闭包（Closure）”的程序结构拥有极大的威力。
function lazy_sum(arr) {
    var sum = function () {
        return arr.reduce(function (x, y) {
            return x + y;
        });
    }
    return sum;
}
当我们调用lazy_sum()时，返回的并不是求和结果，而是求和函数：

var f = lazy_sum([1, 2, 3, 4, 5]); // function sum()
调用函数f时，才真正计算求和的结果：

f(); // 15


请再注意一点，当我们调用lazy_sum()时，每次调用都会返回一个新的函数，即使传入相同的参数：
		var f1 = lazy_sum([1, 2, 3, 4, 5]);
		var f2 = lazy_sum([1, 2, 3, 4, 5]);
		f1 === f2; // false
		f1()和f2()的调用结果互不影响。

		
返回闭包时牢记的一点就是：返回函数不要引用任何循环变量，或者后续会发生变化的变量。
如果一定要引用循环变量怎么办？方法是再创建一个函数，用该函数的参数绑定循环变量当前的值，无论该循环变量后续如何更改，已绑定到函数参数的值不变：

		function count() {
			var arr = [];
			for (var i=1; i<=3; i++) {
				arr.push((function (n) {
					return function () {
						return n * n;
					}
				})(i));
			}
			return arr;
		}

		var results = count();
		var f1 = results[0];
		var f2 = results[1];
		var f3 = results[2];

		f1(); // 1
		f2(); // 4
		f3(); // 9



立即执行函数“创建一个匿名函数并立刻执行”的语法：
		(function (x) {
			return x * x;
		})(3); // 9
		理论上讲，创建一个匿名函数并立刻执行可以这么写：

		function (x) { return x * x } (3);
		但是由于JavaScript语法解析的问题，会报SyntaxError错误，因此需要用括号把整个函数定义括起来：

		(function (x) { return x * x }) (3);
		通常，一个立即执行的匿名函数可以把函数体拆开，一般这么写：

		(function (x) {
			return x * x;
		})(3);




总结一下，有这么几条规则需要遵守：

不要使用new Number()、new Boolean()、new String()创建包装对象；

用parseInt()或parseFloat()来转换任意类型到number；

用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；

通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；

typeof操作符可以判断出number、boolean、string、function和undefined；

判断Array要使用Array.isArray(arr)；

判断null请使用myVar === null；

判断某个全局变量是否存在用typeof window.myVar === 'undefined'；

函数内部判断某个变量是否存在用typeof myVar === 'undefined'。

最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外，虽然null还伪装成了object类型。

更细心的同学指出，number对象调用toString()报SyntaxError：

123.toString(); // SyntaxError
遇到这种情况，要特殊处理一下：

123..toString(); // '123', 注意是两个点！
(123).toString(); // '123'
不要问为什么，这就是JavaScript代码的乐趣！


















































