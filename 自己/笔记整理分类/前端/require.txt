
requirejs具有如下优点：
（1）实现js文件的异步加载，避免网页失去响应；
（2）管理模块之间的依赖性，便于代码的编写和维护。

基本API
require会定义三个变量：define,require,requirejs，其中require === requirejs，一般使用require更简短

define 这个api是用来定义一个模块
require 加载依赖模块，并执行加载完后的回调函数


通过define函数定义一个模块
define(function(){
    function fun1(){
      alert("it works");
    }

    fun1();
})

在页面中使用
<script>
	require(["js/a"]);
</script>

js/a  是基于文件指向引用的文件的路径

require()函数有两个参数，一个是数组，一个是回调函数 。数组填的是依赖模块，模块填配置好的简写或是文件路径
！！！在使用requirejs时，加载模块时不用写.js后缀的，当然也是不能写后缀
require(["js/a"],function(){
    alert("load finished");
})



加载文件
	require.config({
		paths : {
			"jquery" : ["http://libs.baidu.com/jquery/2.0.3/jquery"]   
		}
	})
	require(["jquery","js/a"],function($){
		$(function(){
			alert("load finished");  
		})
	})

	
	
通过paths的配置会使我们的模块名字更精炼，paths还有一个重要的功能，就是可以配置多个路径，如果远程cdn库没有加载成功，可以加载本地的库，如：
require.config({
    paths : {
        "jquery" : ["http://libs.baidu.com/jquery/2.0.3/jquery", "js/jquery"],
        "a" : "js/a"   
    }
})
require(["jquery","a"],function($){
    $(function(){
        alert("load finished");  
    })
})



依赖的jquery模块的输出变量
require(["jquery","underscore"], function($, _){
    $(function(){
        _.each([1,2,3],alert);
    })
})



全局配置
创建一个main.js：
require.config({
    paths : {
        "jquery" : ["http://libs.baidu.com/jquery/2.0.3/jquery", "js/jquery"],
        "a" : "js/a"   
    }
})
然后再页面中使用下面的方式来使用requirejs：
<script data-main="js/main" src="js/require.js"></script>

解释一下，加载requirejs脚本的script标签加入了data-main属性，这个属性指定的js将在加载完reuqire.js后处理，我们把require.config的配置加入到data-main后，就可以使每一个页面都使用这个配置，然后页面中就可以直接使用require来加载所有的短模块名

data-main还有一个重要的功能，当script标签指定data-main属性时，require会默认的将data-main指定的js为根路径，是什么意思呢？如上面的data-main="js/main"设定后，我们在使用require(['jquery'])后(不配置jquery的paths)，require会自动加载js/jquery.js这个文件，而不是jquery.js，相当于默认配置了：
		require.config({
			baseUrl : "js"
		})


第三方模块
通过require加载的模块一般都需要符合AMD规范即使用define来申明模块，但是部分时候需要加载非AMD规范的js，这时候就需要用到另一个功能：shim，shim解释起来也比较难理解，shim直接翻译为"垫"，其实也是有这层意思的，目前我主要用在两个地方
1. 非AMD模块输出，将非标准的AMD模块"垫"成可用的模块，例如：在老版本的jquery中，是没有继承AMD规范的，所以不能直接require["jquery"],这时候就需要shim，比如我要是用underscore类库，但是他并没有实现AMD规范，那我们可以这样配置
	require.config({
		shim: {
			"underscore" : {
				exports : "_";
			}
		}
	})
这样配置后，我们就可以在其他模块中引用underscore模块：
require(["underscore"], function(_){
    _.each([1,2,3], alert);
})


插件形式的非AMD模块，我们经常会用到jquery插件，而且这些插件基本都不符合AMD规范，比如jquery.form插件，这时候就需要将form插件"垫"到jquery中：
	require.config({
		shim: {
			"underscore" : {
				exports : "_";
			},
			"jquery.form" : {
				deps : ["jquery"]
			}
		}
	})
也可以简写为：
	require.config({
		shim: {
			"underscore" : {
				exports : "_";
			},
			"jquery.form" : ["jquery"]
		}
	})

shim属性，专门用来配置不兼容的模块。具体来说，每个模块要定义（1）exports值（输出的变量名），表明这个模块外部调用时的名称；（2）deps数组，表明该模块的依赖性。


这样配置之后我们就可以使用加载插件后的jquery了
	require.config(["jquery", "jquery.form"], function($){
		$(function(){
			$("#form").ajaxSubmit({...});
		})
	})













































