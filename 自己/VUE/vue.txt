
															npm镜像替换淘宝

1.得到原本的镜像地址
npm get registry 

> https://registry.npmjs.org/

设成淘宝的
npm config set registry http://registry.npm.taobao.org/

 

2.换成原来的
npm config set registry https://registry.npmjs.org/




														运行vue.js
	
	npm install   （安装过一次的应该不用再次安装）
	npm run dev													

	
	
	
	
									可以直接引入 vue.js 到页面，
									
																										
模版通过 <script type="text/x-template" id="myTemp"></script> 声明


	
	
	

													vue.js模板语法
													
	文本 {{}}，文本插值.
		{{message}}

	Html 使用v-html指令用于输出html代码(输出的代码在插入的代码子集里)
		<div v-html="message"></div>
		data:{message:'<h1>菜鸟教程</h1>'}
	
	属性 v-bind
		v-bind:class="{class1:class1}"
		data:{class1:true}
		绑定css不能直接给样式名绑定，需判断;以及在数据里给出布偶值来表示要不要用这个类，类的判断需要大括号表达计算,类名:布偶值。
		v-bind:class="{class1:class1,class2:class2}"
		多个样式的写法，逗号隔开
	
	表达式{{}}JavaScript完全表达式支持
		{{ 5+5 }}
		{{ ok ? 'Yes' : 'No' }}
		{{ message.split('').reverse().join('') }}
		<div v-bind:id="''list- + id">菜鸟BB</div>
	
	指令 v- 指令是带有v-前缀的特殊属性，用于在表达式的值改变时，将某些行为应用到DOM上。
		<p v-if="seen">现在你看到我了</p>
	
		data:{ seen:true }
	
	参数在指令后以冒号指明
		<pre><a v-bind:href="url">菜鸟教程</a></pre>
		
		data:{ url:'http://www.runoob.com' }
	
		<a v-on:click="doSomething"></a>
		监听事件名
		
	修饰符 是以半角句号. 指明的特殊后缀，用于指出一个指定应该以特殊方式绑定
		例如  .prevent修饰符告诉v-on指令对于触发的事件调用even.preventDefault():
		<form v-on:submit.prevent="onSubmit"></form>
	
	用户输入 在input输入框中我们可以使用v-model指令来实现双向数据绑定：
		
		<p>{{ message }}</p>
		<input v-model="message" />
		
		data{ message:'Runoob!' }
	
		字符串反转
		<p>{{message}}</p>
		<button v-on:click="reverseMessage">反转字符串</button>
	
		data:{ message:'Runoob!' },
		methods:{ 
			reverseMessage: function(){
				this.message = this.message.split('').reverse().jonin('')
			}
		}
	
	过滤器 允许自定义过滤器，被用作一些常见的文本格式化。由"管道符"指示，格式如下：
		<!---------在两个大括号中---------->
		{{ message | capitalize }}
	
		<!---------在 v-vind 指令中---------->
		<div v-bind:id="rawId | formatId"><>
	
		过滤器函数接受表达式的值作为第一个参数。
		以下实例对输入的字符串第一个字母转为大写：
		{{ message | capitalize }}
		
		data:{ message:'runoob' },
		filters:{
			capitalize: function(value){	
				if (!value) return ''
				value = value.toString()
				return value.charAt(0).toUpperCase() + value.slice(1)
			}
		}
	
		过滤器可以串联
		{{ message | filterA | filterB }}
		过滤器是JavaScript函数，因此可以接受参数:
		(( message | filterA('arg1','arg2') ))
		这里，message是第一个参数，字符串'arg1'将传给过滤器作为第二个参数，arg2表达式的值将被求值然后传给过滤器作为第三个参数。
	
		缩写 v-bind缩写 Vue.js为两个最为常用的指令提供了特写的缩写：
			完整语法    <a v-bind:href="url"></a>
			缩写        <a :href="url"></a>
			完整语法	<a v-on:click="doSomething"></a>
			缩写		<a @click="doSomething"></a>
	
		构造器
			每一个Vue.js应用都是通过构造函数Vue创建一个vue的根实例来启动的：
			var vm = new Vue({
				//选项
			})
			
		属性与方法
			每个Vue实例都会代理其data对象里所有的属性：
			var data = { a:1 }
			var vm = new Vue({
				data:data
			})
			vm.a === data.a //->true
			//设置属性也会影响到原始数据
			vm.a = 2 
			data.a //->2
			// ...反之亦然
			data.a = 3
			vm.a //->3
		
		除了data属性，Vue实例暴露了一些有用的实例属性与方法。这些属性与方法都带有前缀$，以便于代理的data属性区分。
			var data = {a:1}
			var vm = new Vue({
				el:'#example',
				data:data
			})
		
			vm.$data === data //-> true
			vm.$el === document.getElementById('example') //->true
			//$watch是一个实例方法
			vm.$watch('a',function(newVal,oldVal){
				//这个回调将在'vm.a'改变后调用
			})
		
		
		
													vue.js条件与循环
													
	v-if	条件判断，在元素和template中使用v-if指令
		<p v-if="seen">现在你看到我了</p>
		<template v-if="ok">
			<h1>菜鸟教程</h1>
			<p>学的不仅是知识，更是欲望！</p>
			<p>哈哈哈，打字辛苦啊！！！(不是我说的)</p>
		</template>
		
		这里，v-if指令将根据表达式seen的值（true或false）来决定是否插入p元素。
		在字符串模板中，如Handlebars，我们得像这样写一个条件块:
		
		<!-- Handlebars 模板 -->
		{{#if ok}}
			<h1>Yes</h1>
		{{/if}}
		
	v-else 可以用v-else 指令给v-if添加一个“else”块：	
		随机生成一个数字，判断是否大于0.5，然后输出对应信息：
		<div v-if="Math.random() > 0.5 ">
			Sorry
		</div>
		<div v-else>
			Not sorry
		</div>
		
	v-else-if	在2.1.0新增，可以链接式的多次使用。	
		
	v-show	根据条件展示元素。
		<h1 v-show="ok">Hello!</h1>
		
		
		
		
													循环语句
													
	v-for	需要以site in sites 形式的特殊语法，sites是源数据数组并且site是数组元素迭代的别名。
			可以绑定数据到数组来渲染一个列表：
		<li v-for="site in sites">
			{{ site.name }}
		</li>
		
		data:{
			sites:[
				{ name: 'Runoob' },
				{ name: 'Google' },
				{ name: 'Taobao' },
			]
		}
		
		模板中使用v-form
		<template v-for="site in sites">
			<li>{{ site.name }}</li>
			<li>---------------</li>
		</template>
		
	v-for	迭代对象:可以通过一个对象的属性来迭代数据:
		<li v-for="value in object">
			{{ value }}
		</li>
		
		data:{
			object:{
				name: '菜鸟教程',
				url: 'http://www.runoob.com',
				slogan: '学的不仅是知识，更是欲望！'
			}
		}
		你也可以提供第二个的参数为键名：
		<li v-for="(value,key) in object">
			{{ key }} : {{ value }}
		</li>
		第三个参数为索引
		<li v-for="(value,key,index) in object">
			{{ index }}. {{ key }} : {{ value }}
		</li>
		
	v-for 迭代整数，也可以循环整数.
		<li v-for="n in 10">
			{{ n }}
		</li>
	v-for 循环数组
		<li v-for="n in [1,,3,5]">
			{{ n }}
		</li>
		
	v-for 默认行为试着不改变整体，而是替换元素，使其重新排序，需要提供key特殊属性
		<div v-for="item in items" :key="item.id">
			{{ item.text }}
		</div>
		
		
		
		
		
												vue.js计算属性
												
	computed	处理复杂逻辑时很有用。
		模板实例
		<div id="app">
			{{ message.split('').reverse().join('') }}
		</div>
		
		计算属性的实例
		<p>原始字符串： {{ message }}</p>
		<p>计算后反转字符串：{{ reversedMessage }}</p>
		
		data:{message:'Runoob!'},
		computed:{
			//计算属性的 getter
			reversedMessage: function(){
				//'this 指向 vm 实例'
				return this.message.split('').reverse().join('')
			}
			
		}
		声明了一个计算属性reversedMessage,提供的函数将作用属性vm.reversedMessage 的 getter。
		vm.reversedMessage依赖于vm.message,在vm.message发生改变时，vm.reversedMessage 也会更新
		
	computed vs methods
		我们可以使用 methods 来替代 computed，效果上两个都是一样的，但是 computed 是基于它的依赖缓存，
		只有相关依赖发生改变时才会重新取值。而使用 methods ，在重新渲染的时候，函数总会重新调用执行。
		methods:{
			reversedMessage2: function(){
				return this.message.split('').reverse().join('')
			}
		}
		可以说使用computed性能会更好，但是如果你不希望缓存，你可以使用methods。
		
	computed setter
		computed 属性默认只有getter，不过在需要时你也可以提供一个setter:
		computed: {
			site: {
			  // getter
			  get: function () {
				return this.name + ' ' + this.url
			  },
			  // setter
			  set: function (newValue) {
				var names = newValue.split(' ')
				this.name = names[0]
				this.url = names[names.length - 1]
			  }
			}
		}
		// 调用 setter， vm.name 和 vm.url 也会被对应更新
		vm.site = '菜鸟教程 http://www.runoob.com';
		document.write('name: ' + vm.name);
		document.write('<br>');
		document.write('url: ' + vm.url);
		
		
		
		
														vue.js样式绑定
														
	Vue.js v-bind 在处理 class 和 style 时， 专门增强了它。表达式的结果类型除了字符串之外，还可以是对象或数组。													
		
	class属性绑定
		我们可以为v-bind：class设置一个对象，从而动态的切换class
		class="active" v-bind:class="{ active: isActive, 'text-danger' : hasError }"
		如果数据在前类在后，则:接入  反则类需加单引号
		
		也可以绑定一个对象
		v-bind:class="classObject"
		computed:{
			classObject: function (){
				return {
					active: this.isActive && !this.error,
					'text-danger': this.error && this.error.type === 'fatal',
				}
			}
		}
		
		传递一个数组
		v-bind:class="[activeClass,errorClass]"
		data:{
			activeClass: 'active',
			errorClass: 'text-danger'
		}
		active为类名
		
		使用三元表达式来切换列表中的class
		v-bind:class="[errorClass,isActive ? activeClass : '']"
		isActive为true时添加activeClass类
	
	style（内联样式）  直接设置样式
		v-bind:style="{ color: activeColor,fontSize: fontSsize + 'px' }"
	
		直接绑定一个样式对象
		v-bind:style="styleObject"
		
		data:{
			styleObject: {
				color: 'green',
				fontSize:'30px'
			}
		}
	
		使用数组将多个样式对象应用到一个元素：
		v-bind:style="[baseStyles,overridingStyles]"
	
		data:{
			baseStyles:{
				color:'green',
				fontSize:'30px'
			},
			overridingStyles: {
				'font-weight': 'bold'
			}
		}
		
注意：当 v-bind:style 使用需要特定前缀的 CSS 属性时，如 transform ，Vue.js 会自动侦测并添加相应的前缀。
	
	
	
	
	
	
	
	
	
												vue.js事件处理器
												
	v-on指令	事件监听
		<button v-on:click="counter += 1">增加 1<button>
		<p>这个按钮被点击了  {{ counter }}次。</p>
	
		data: {
			counter:0
		}
	
	通常情况下，我们需要使用一个方法来调用JavaScript方法。
		v-on 可以接收一个定义的方法来调用。
		<div id="app">
		   <!-- `greet` 是在下面定义的方法名 -->
		  <button v-on:click="greet">Greet</button>
		</div>
		 
		<script>
		var app = new Vue({
		  el: '#app',
		  data: {
			name: 'Vue.js'
		  },
		  // 在 `methods` 对象中定义方法
		  methods: {
			greet: function (event) {
			  // `this` 在方法里指当前 Vue 实例
			  alert('Hello ' + this.name + '!')
			  // `event` 是原生 DOM 事件
			  if (event) {
				  alert(event.target.tagName)
			  }
			}
		  }
		})
		// 也可以用 JavaScript 直接调用方法
		app.greet() // -> 'Hello Vue.js!'
		</script>
	
	除了直接绑定一个方法，，也可以用内联JavaScript语句
		<button v-on:click="say('Hello')">Say Hello</button>
	
	事件修饰符
		Vue.js 为 v-on 提供了事件修饰符来处理 DOM 事件细节，如：event.preventDefault() 或 event.stopPropagation()。
		Vue.js通过由点(.)表示的指令后缀来调用修饰符。
		.stop
		.prevent
		.capture
		.self
		.once
	
		<!-- 阻止单击事件冒泡 -->
		<a v-on:click.stop="doThis"></a>
		<!-- 提交事件不再重载页面 -->
		<form v-on:submit.prevent="onSubmit"></form>
		<!-- 修饰符可以串联  -->
		<a v-on:click.stop.prevent="doThat"></a>
		<!-- 只有修饰符 -->
		<form v-on:submit.prevent></form>
		<!-- 添加事件侦听器时使用事件捕获模式 -->
		<div v-on:click.capture="doThis">...</div>
		<!-- 只当事件在该元素本身（而不是子元素）触发时触发回调 -->
		<div v-on:click.self="doThat">...</div>

		<!-- click 事件只能点击一次，2.1.4版本新增 -->
		<a v-on:click.once="doThis"></a>
	
	按键修饰符
		Vue 允许为 v-on 在监听键盘事件时添加按键修饰符：
		<!-- 只有在 keyCode 是 13 时调用 vm.submit() -->
		<input v-on:keyup.13="submit">
		
		记住所有的 keyCode 比较困难，所以 Vue 为最常用的按键提供了别名：
		<!-- 同上 -->
		<input v-on:keyup.enter="submit">
		<!-- 缩写语法 -->
		<input @keyup.enter="submit">
	
	全部的按键别名：
		.enter
		.tab
		.delete (捕获 "删除" 和 "退格" 键)
		.esc
		.space
		.up
		.down
		.left
		.right
		.ctrl
		.alt
		.shift
		.meta
	
		<p><!-- Alt + C -->
		<input @keyup.alt.67="clear">
		<!-- Ctrl + Click -->
		<div @click.ctrl="doSomething">Do something</div>
	
	
	
	
	
															vue.js表单
															
	v-model		指令在表单控件元素上创建双向数据绑定。
		在多个复选框中绑定同一值v-model="checkedNames"
		<span>选择的值为:{{ checkedNames }}</span>
	
		data:{
			checkedNames: []
			//所有绑定的值的选中都会出现
		}
		
		单选按钮的双向数据绑定
		<input type="radio" id="runoob" value="Runoob" v-model="picked" />
		<label for="runoob">Runoob<label/>
		<br >
		<input type="radio" id="google" value="Google" v-model="picked" />
		<label for="google">Google</label>
		<br>
		<span>选中的值为：{{ picked }}</span>
		
		data:{
			picked: 'Runoob'
		}
	
		select	下拉列表的双向数据绑定
		<select v-model="selected" name="fruit">
			<option value="">选择一个网站</option>
			<option value="www.runoob.com">Runoob</option>
			<option value="www.google.com">Google</option>
		</select>
		<div id="output">
			选择的网站是：{{ selected }}
		</div>
	
		data: {
			selected: ''
		}
	
		
	修饰符
		.lazy
		在默认情况下， v-model 在 input 事件中同步输入框的值与数据，但你可以添加一个修饰符 lazy ，从而转变为在 change 事件中同步：
		<!-- 在 "change" 而不是 "input" 事件中更新 -->
		<input v-model.lazy="msg" >
		.number
		如果想自动将用户的输入值转为 Number 类型（如果原值的转换结果为 NaN 则返回原值），可以添加一个修饰符 number 给 v-model 来处理输入值：
		<input v-model.number="age" type="number">
		这通常很有用，因为在 type="number" 时 HTML 中输入的值也总是会返回字符串类型。
		.trim
		如果要自动过滤用户输入的首尾空格，可以添加 trim 修饰符到 v-model 上过滤输入：
		<input v-model.trim="msg">
	
	
	
									
	
	
												vue.js组件
												
	组件是可以扩展HTML元素，封装可重用的代码。
	
	注册一个全局组件语法格式如下：
		Vue.component(tagName,options)
		tagName为组件名，options为配置选项。注册后，我们可以使用以下方式来调用组件：
		<tagName></tagName>
		
	全局组件，所有实例都能使用全局组件。
		注册一个简单的全局组件，并使用它：
		<div id="app">
			<runoob></runoob>
		</div>
	
		<script>
			//注册
			Vue.component('runoob',{
				template:'<h1>自定义组件！</h1>'
			})
			//创建根实例
			new Vue({
				el:'#app'
			})
		</script>
	
	局部组件,也可以在实例选项中注册局部组件，这样组件只能在这个实例中使用：
		<div id="app">
			<runoob></runoob>
		</app>
	
		<script>
			var Child = {
				template: '<h1>自定义组件!</h1>'
			}
			//创建根实例
			new Vue({
				el: '#app',
				components {
					//<runoob>将只在父模板可用
					'runoob':Child
				}
			})
		</script>
	
	Prop	是父组件用来传递的一个自定义属性。
			父组件的数据需要通过props把数据传给子组件，子组件需要显式地用props选项声明"prop"
	
		<div id="app">
			<child message="hello!"></child>
		</div>
	
		<script>
			//注册
			Vue.component('child',{
				//声明props
				props: ['message'],
				//同样也可以在vm实例中像"this.message"这样使用
				template: '<span>{{ message }}</span>'
			})
			//创建根实例
			new Vue({
				el: '#app'
			})
		</script>
	
	动态Prop
		类似于用v-bind绑定HTML特性到一个表达式，也可以用v-bind动态绑定props的值到父组件的数据中，每当父组件的数据变化时，该变化也会传导给子组件:
		
		<div id="app">
			<div>
				<input v-model="parentMsg" />
				<br>
				<child v-bind:message="parentMsg"></child>
			</div>
		</div>
	
		<script>
			//注册
			Vue.component('child',{
				//声明 props
				props: ['message'],
				//同样也可以在vm实例中像"this.message" 这样使用
				template: '<span>{{ message }}</span>'
			})
			//创建根实例
			new Vue({
				el:'#app',
				data:{
					parentMsg: '父组件内容'
				}
			})
		</script>
	
	以下实例中将v-bind指令将todo传到每一个重复的组件中：
		<div id="app">
			<ol>
				<todo-item v-for="item in sites" v-bind:todo="item"></todo-item>
			</ol>
		</div>
	
		<script>
			Vue.component('todo-item',{
				props: ['todo'],
				template:'<li>{{ todo.text }}</li>'
			})
			new Vue({
				el:'#app'
				data:{
					sites:[
						{ text: 'Runoob' },
						{ text: 'Google' },
						{ text: 'Taobao' }
					]
				}
			})
		</script>
	
注意：prop是单向绑定的：当父组件的属性变化时，将传导给子组件，但是不会反过来。
	
	Prop验证	组件可以为props指定验证要求。
		prop是一个对象而不是字符串数组时，它包含验证要求:
		Vue.component('example',{
			props: {
				//基础类型检测 （'null'意思是任何类型都可以）
				propA: Number,
				//多种类型
				propB: [String,Number],
				//必传且是字符串
				propC: {
					type: String,
					required: true
				},
				//数字，有默认值
				propD: {
					type: Number,
					default: 100
				},
				//数组/对象的默认值应当由一个工厂函数返回
				propE: {
					type: Object,
					default: function () {
						return { message: 'hello' }
					}
				},
				//自定义验证函数
				propF: {
					validator: function (value) {
						return value > 10
					}
				}
			}
		})
	
	type 可以是下面原生构造器：
		String
		Number
		Boolean
		Function
		Object
		Array
		type 也可以是一个自定义构造器，使用 instanceof 检测。
	
	
	自定义事件
		父组件是使用 props 传递数据给子组件，但如果子组件要把数据传递回去，就需要使用自定义事件！
		我们可以使用 v-on 绑定自定义事件, 每个 Vue 实例都实现了事件接口(Events interface)，即：
		使用 $on(eventName) 监听事件
		使用 $emit(eventName) 触发事件
		另外，父组件可以在使用子组件的地方直接用 v-on 来监听子组件触发的事件。
		以下实例中子组件已经和它外部完全解耦了。它所做的只是触发一个父组件关心的内部事件。
	
		<div id="app">
			<div id="counter-event-example">
			  <p>{{ total }}</p>
			  <button-counter v-on:increment="incrementTotal"></button-counter>
			  <button-counter v-on:increment="incrementTotal"></button-counter>
			</div>
		</div>
		 
		<script>
		Vue.component('button-counter', {
		  template: '<button v-on:click="increment">{{ counter }}</button>',
		  data: function () {
			return {
			  counter: 0
			}
		  },
		  methods: {
			increment: function () {
			  this.counter += 1
			  this.$emit('increment')
			}
		  },
		})
		new Vue({
		  el: '#counter-event-example',
		  data: {
			total: 0
		  },
		  methods: {
			incrementTotal: function () {
			  this.total += 1
			}
		  }
		})
		</script>
	
如果你想在某个组件的根元素上监听一个原生事件。可以使用 .native 修饰 v-on 。例如：	
	<my-component v-on:click.native="doTheThing"></my-component>
	
	
	
	
	
											
											
											vue.js自定义指令
											
	除了默认设置的核心指令(v-model和v-show)，Vue也允许注册自定义指令。
	下面我们注册一个全局指令v-focus，该指令的功能是在页面加载时，元素获取焦点。
	
		<div id="app">
			<p>页面载入时,input元素自动获取焦点:</p>
			<input v-focus>
		</div>
	
		<script>
			//注册一个全局自定义指令v-focus
			Vue.directive('focus',{
				//当绑定元素插入到DOM中。
				inserted: function(el){
					//聚焦元素
					el.focus()
				}
			})
			//创建根实例
			new Vue({
				el: '#app'
			})
		</script>
	
		我们也可以在实例使用directives选项来注册局部指令，这样指令只能在这个实例中使用:
		<div id="app">
			<p>页面载入时，input元素自动获取焦点:</p>
			<input v-focus>
		<div>
	
		<script>
			//创建根实例
			new Vue({
				el: '#app',
				directives: {
					//注册一个局部的自定义指令 v-focus
					focus: {
						//指令的定义
						inserted: function (el) {
							//聚焦元素
							el.focus()
						}
					}
				}
			})
		</script>
	
	钩子
		钩子函数
			指令定义函数提供了几个钩子函数（可选）：
			bind: 只调用一次，指令第一次绑定到元素时调用，用这个钩子函数可以定义一个在绑定时执行一次的初始化动作。
			inserted: 被绑定元素插入父节点时调用（父节点存在即可调用，不必存在于 document 中）。
			update: 被绑定元素所在的模板更新时调用，而不论绑定值是否变化。通过比较更新前后的绑定值，可以忽略不必要的模板更新（详细的钩子函数参数见下）。
			componentUpdated: 被绑定元素所在模板完成一次更新周期时调用。
			unbind: 只调用一次， 指令与元素解绑时调用。
		钩子函数参数
			钩子函数的参数有：
			el: 指令所绑定的元素，可以用来直接操作 DOM 。
			binding: 一个对象，包含以下属性：
			name: 指令名，不包括 v- 前缀。
			value: 指令的绑定值， 例如： v-my-directive="1 + 1", value 的值是 2。
			oldValue: 指令绑定的前一个值，仅在 update 和 componentUpdated 钩子中可用。无论值是否改变都可用。
			expression: 绑定值的字符串形式。 例如 v-my-directive="1 + 1" ， expression 的值是 "1 + 1"。
			arg: 传给指令的参数。例如 v-my-directive:foo， arg 的值是 "foo"。
			modifiers: 一个包含修饰符的对象。 例如： v-my-directive.foo.bar, 修饰符对象 modifiers 的值是 { foo: true, bar: true }。
			vnode: Vue 编译生成的虚拟节点，查阅 VNode API 了解更多详情。
			oldVnode: 上一个虚拟节点，仅在 update 和 componentUpdated 钩子中可用。
	
		以下实例演示了这些参数的使用：
			<div id="app"  v-runoob:hello.a.b="message">
			</div>
			 
			<script>
			Vue.directive('runoob', {
			  bind: function (el, binding, vnode) {
				var s = JSON.stringify
				el.innerHTML =
				  'name: '       + s(binding.name) + '<br>' +
				  'value: '      + s(binding.value) + '<br>' +
				  'expression: ' + s(binding.expression) + '<br>' +
				  'argument: '   + s(binding.arg) + '<br>' +
				  'modifiers: '  + s(binding.modifiers) + '<br>' +
				  'vnode keys: ' + Object.keys(vnode).join(', ')
			  }
			})
			new Vue({
			  el: '#app',
			  data: {
				message: '菜鸟教程!'
			  }
			})
			</script>
	
		有时候我们不需要其他钩子函数，我们可以简写函数，如下格式：
		Vue.directive('runoob', function (el, binding) {
		  // 设置指令的背景颜色
		  el.style.backgroundColor = binding.value.color
		})
	
	
指令函数可接受所有合法的 JavaScript 表达式，以下实例传入了 JavaScript 对象：	
	
	<div id="app">
		<div v-runoob="{ color: 'green', text: '菜鸟教程！' }"></div>
	</div>
	
	<script>
		Vue.driective('runoob',function(el,binding){
			//简写方式设置文本及背景颜色
			el.innerHTML = binding.value.text
			el.style.backgroundColor = binding.value.color
		})
		new Vue({
			el: '#app'
		})
	</script>
	
	
	
	
	
											vue.js路由
											
	Vue.js路由允许我们通过不同的URL访问不同的内容。
	通过Vue.js可以实现多视图的单页Web应用( single page web application,SPA )
	Vue.js路由需要载入 vue-router库,然后配置组件和路由映射，再告诉vue-router在哪里渲染它们。
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	




	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	


